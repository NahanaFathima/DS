#include <stdio.h>

#define MAX_ELEMENTS 100 // Maximum non-zero elements in the sparse matrix

// Function to add two sparse matrices
void addSparseMatrices(int mat1[][3], int size1, int mat2[][3], int size2, int result[][3], int *sizeResult) {
    int i = 0, j = 0, k = 0;

    // Traverse both matrices and add elements
    while (i < size1 && j < size2) {
        // If mat1's element is smaller, add it to result
        if (mat1[i][0] < mat2[j][0] || (mat1[i][0] == mat2[j][0] && mat1[i][1] < mat2[j][1])) {
            result[k][0] = mat1[i][0];
            result[k][1] = mat1[i][1];
            result[k][2] = mat1[i][2];
            i++;
        }
        // If mat2's element is smaller, add it to result
        else if (mat1[i][0] > mat2[j][0] || (mat1[i][0] == mat2[j][1] && mat1[i][1] > mat2[j][1])) {
            result[k][0] = mat2[j][0];
            result[k][1] = mat2[j][1];
            result[k][2] = mat2[j][2];
            j++;
        }
        // If both have same row and column, add the values
        else {
            result[k][0] = mat1[i][0];
            result[k][1] = mat1[i][1];
            result[k][2] = mat1[i][2] + mat2[j][2];
            i++;
            j++;
        }
        k++;
    }

    // If elements left in mat1, add them to result
    while (i < size1) {
        result[k][0] = mat1[i][0];
        result[k][1] = mat1[i][1];
        result[k][2] = mat1[i][2];
        i++;
        k++;
    }

    // If elements left in mat2, add them to result
    while (j < size2) {
        result[k][0] = mat2[j][0];
        result[k][1] = mat2[j][1];
        result[k][2] = mat2[j][2];
        j++;
        k++;
    }

    *sizeResult = k; // Set the final result size
}

// Function to display a sparse matrix
void displaySparseMatrix(int mat[][3], int size) {
    printf("Row\tCol\tValue\n");
    for (int i = 0; i < size; i++) {
        printf("%d\t%d\t%d\n", mat[i][0], mat[i][1], mat[i][2]);
    }
}

int main() {
    int rows, cols, size1 = 0, size2 = 0, sizeResult = 0;

    // Input the number of rows and columns in the matrices
    printf("Enter the number of rows and columns in the matrices: ");
    scanf("%d %d", &rows, &cols);

    int mat1[MAX_ELEMENTS][3], mat2[MAX_ELEMENTS][3], result[MAX_ELEMENTS][3];

    // Input first sparse matrix
    printf("Enter the non-zero elements of the first sparse matrix (row, col, value):\n");
    printf("Enter -1 for row to stop entering non-zero elements.\n");
    while (1) {
        int row, col, value;
        printf("Enter row, column and value: ");
        scanf("%d %d %d", &row, &col, &value);

        if (row == -1) {
            break;
        }

        mat1[size1][0] = row;
        mat1[size1][1] = col;
        mat1[size1][2] = value;
        size1++;
    }

    // Input second sparse matrix
    printf("Enter the non-zero elements of the second sparse matrix (row, col, value):\n");
    printf("Enter -1 for row to stop entering non-zero elements.\n");
    while (1) {
        int row, col, value;
        printf("Enter row, column and value: ");
        scanf("%d %d %d", &row, &col, &value);

        if (row == -1) {
            break;
        }

        mat2[size2][0] = row;
        mat2[size2][1] = col;
        mat2[size2][2] = value;
        size2++;
    }

    // Perform the addition of two sparse matrices
    addSparseMatrices(mat1, size1, mat2, size2, result, &sizeResult);

    // Display the result
    printf("\nThe result of the addition of the two sparse matrices is:\n");
    displaySparseMatrix(result, sizeResult);

    return 0;
}
