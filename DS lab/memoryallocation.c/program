#include <stdio.h>

void bestFit(int blockSizes[], int m, int processSizes[], int n) {
    // Array to store the allocation result
    int allocation[n];
    
    // Initialize all allocations as -1 (meaning not allocated)
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Best-Fit Allocation
    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        int minDiff = 9999; // A large number to start with
        
        // Find the block that fits best for process i
        for (int j = 0; j < m; j++) {
            if (blockSizes[j] >= processSizes[i] && blockSizes[j] - processSizes[i] < minDiff) {
                minDiff = blockSizes[j] - processSizes[i];
                bestIdx = j;
            }
        }

        // If a suitable block is found, allocate the process
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSizes[bestIdx] -= processSizes[i]; // Reduce the block size
        }
    }

    // Display the results
    printf("\nProcess No\tProcess Size\tBlock No\tBlock Size Left\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processSizes[i], allocation[i] + 1, blockSizes[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processSizes[i]);
        }
    }
}

int main() {
    int m, n;

    // Number of memory blocks
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    int blockSizes[m];

    // Sizes of each block
    printf("Enter the size of each block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSizes[i]);
    }

    // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int processSizes[n];

    // Sizes of each process
    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSizes[i]);
    }

    // Perform the best-fit memory allocation
    bestFit(blockSizes, m, processSizes, n);

    return 0;
}
